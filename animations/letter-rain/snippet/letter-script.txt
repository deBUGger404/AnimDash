// Matter.js module aliases
const { Engine, Render, Runner, World, Bodies, Body, Events } = Matter;

// Create the physics engine
const engine = Engine.create();
const world = engine.world;

// Create the renderer
const render = Render.create({
    element: document.body,
    engine: engine,
    options: {
        width: window.innerWidth,
        height: window.innerHeight,
        wireframes: false,
        background: "black"
    }
});

// Run the physics engine and renderer
Render.run(render);
const runner = Runner.create();
Runner.run(runner, engine);

// Ground (Static Body)
const ground = Bodies.rectangle(
  window.innerWidth / 2, 
  window.innerHeight + 30, 
  window.innerWidth, 
  60, {
    isStatic: true,
    render: { visible: false }
});
World.add(world, ground);

// Letter options
const letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

// Function to generate a random 16-bit color
function getRandomColor() {
    const r = Math.floor(Math.random() * 32) * 8;  // 5-bit red
    const g = Math.floor(Math.random() * 64) * 4;  // 6-bit green
    const b = Math.floor(Math.random() * 32) * 8;  // 5-bit blue
    return `rgb(${r}, ${g}, ${b})`;
}

// Function to spawn a falling letter
function spawnLetter() {
    const x = Math.random() * window.innerWidth;
    const letter = letters[Math.floor(Math.random() * letters.length)];
    const size = Math.random() * 25 + 20; // Smaller font size for rain effect

    // Create a circular physics body
    const letterBody = Bodies.circle(x, 50, size / 2, {
        restitution: 0.2, 
        friction: 0.05,
        density: 0.02,
        render: { visible: false }
    });

    // Attach letter data
    letterBody.letter = letter;
    letterBody.color = getRandomColor();
    letterBody.size = size;
    letterBody.alpha = 1;
    World.add(world, letterBody);
}

// Spawn letters at regular intervals
setInterval(spawnLetter, 300);

// Custom rendering: Draw text instead of default shapes
Events.on(render, "afterRender", () => {
    const context = render.context;
    context.textAlign = "center";
    context.textBaseline = "middle";

    world.bodies.forEach(body => {
        if (body.letter) {
            // Fade letters as they approach the bottom
            if (body.position.y >= window.innerHeight - 40) {
                body.alpha -= 0.005;
                if (body.alpha <= 0) {
                    Matter.World.remove(world, body);
                }
            }
            context.globalAlpha = body.alpha;
            context.fillStyle = body.color;
            context.font = `bold ${body.size}px Arial`;
            context.fillText(body.letter, body.position.x, body.position.y);
            context.globalAlpha = 1;
        }
    });
});

// Adjust canvas size on window resize
window.addEventListener("resize", () => {
    render.canvas.width = window.innerWidth;
    render.canvas.height = window.innerHeight;
    Matter.Body.setPosition(ground, { x: window.innerWidth / 2, y: window.innerHeight });
});
